AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-send-emails
  Sample SAM Template for sam-send-emails

Parameters:
  SenderEmail:
    Type: String
    Description: Sender Email

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Resources:

  ## Bucket files to add in mails
  BucketFiles:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'email-files-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  ## Queue for sending emails
  SendEmailsSqsQueue:
    Type: AWS::SQS::Queue
    
    
  ## Send emails with Lambda Function
  SendEmailsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: emails/
      Handler: app.lambda_handler
      Runtime: python3.6
      Policies:
        - SQSPollerPolicy:
            QueueName:
              !GetAtt SendEmailsSqsQueue.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:Get*
              Resource: !Sub 'arn:aws:s3:::email-files-${AWS::AccountId}/*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendTemplatedEmail
                - ses:SendRawEmail
                - mobiletargeting:GetEmailTemplate
              Resource: '*'
      Environment:
        Variables:
          SENDER_EMAIL: !Ref SenderEmail
          BUCKET_NAME: !Select [5, !Split [":", !GetAtt BucketFiles.Arn]]
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SendEmailsSqsQueue.Arn
            BatchSize: 5

  ## Raw data bucket
  RawDataBucket:
    Type: AWS::S3::Bucket

  ## Processed Data
  ProcessedDataBucket:
    Type: AWS::S3::Bucket
    
  ## Ingest Firehose
  Firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt ProcessedDataBucket.Arn
        CompressionFormat: GZIP
        RoleARN: !GetAtt FirehoseAccessRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt ProcessDataFunction.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        S3BackupMode: Enabled
        S3BackupConfiguration:
          BucketARN: !GetAtt RawDataBucket.Arn
          CompressionFormat: GZIP
          RoleARN: !GetAtt FirehoseAccessRole.Arn
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1

  # Initial process function
  ProcessDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 180
      CodeUri: kinesis/
      Handler: app.lambda_handler
      Runtime: python3.6
      
  # Access role for Firehose
  FirehoseAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "firehose.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: S3WritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - s3:PutObject
              Effect: Allow
              Resource:
                - !GetAtt RawDataBucket.Arn
                - !Sub
                  - ${Arn}/*
                  - { Arn: !GetAtt RawDataBucket.Arn }
                - !GetAtt ProcessedDataBucket.Arn
                - !Sub
                  - ${Arn}/*
                  - { Arn: !GetAtt ProcessedDataBucket.Arn }
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - lambda:InvokeFunction
              Effect: Allow
              Resource:
                - !GetAtt ProcessDataFunction.Arn


Outputs:
  S3Bucket:
    Description: "Amazon S3 bucket name"
    Value: !Select [5, !Split [":", !GetAtt BucketFiles.Arn]]
  Queue:
    Description: "Amazon SQS url"
    Value: !Ref SendEmailsSqsQueue
  Kinesis:
    Description: "Kinesis Firehose delivery stream name"
    Value: !Ref Firehose